-- ----------------------------------------
-- PoiXson - Reactor Controller
-- license GPL-3
-- author lorenzo at poixson.com
-- link http://poixson.com/
-- ----------------------------------------

os.loadAPI("/pxn")



local StartupDelay  = 5
local UpdateDelay   = 3

-- rod config
local RodStep       = 1
local RodStepTurbo  = 5
local MaxTurboLag   = 8

local RodStart      = 0
local TargetPercent = 50
local RodMax        = 50

local rollingRange  = 50



-- ----------------------------------------



pxn.clear()
pxn.pos()

-- create startup file
pxn.CreateStartupFile("reactor")

local reactor = pxn.DetectReactor()

local displayingHelp = false



-- ----------------------------------------
-- help



local function DisplayHelp()
    local sizeX, sizeY = term.getSize()
    local margin = 3
    local width = (sizeX - (margin * 2)) + 2
    term.setBackgroundColor(colors.gray)
    pxn.pos(margin, margin)
    pxn.println(pxn.strRepeat(width, "="))
    pxn.println("| "..pxn.strRepeat(width - 4).." |")
    if displayingHelp then

        pxn.println("| "..pxn.padRight("q/a - Percent charged target up/down", width - 4).." |")
        pxn.println("| "..pxn.padRight("w/s - Max control rods up/down",       width - 4).." |")
        pxn.println("| "..pxn.padRight("e/d - Seconds per update up/down",     width - 4).." |")
        pxn.println("| "..pxn.strRepeat(width - 4).." |")
        pxn.println("| "..pxn.padRight("  h - Toggle this help screen",        width - 4).." |")
        pxn.println("| "..pxn.padRight("  t - Quit this program",              width - 4).." |")

    else

        for i=1,6 do
            pxn.println("| "..pxn.strRepeat(width - 4).." |")
        end

    end
    pxn.println("| "..pxn.strRepeat(width - 4).." |")
    pxn.println(pxn.strRepeat(width, "="))
end

local function ToggleHelp()
    displayingHelp = not displayingHelp
    DisplayHelp()
end



-- ----------------------------------------
-- thread loops



local function KeyPressListener()
    while true do
        local event, param = os.pullEventRaw()
        if event == "terminate" then
            pxn.shutdown()
            return
        elseif event == "key" then
            local char = keys.getName(param)
            if char == "t" then
                pxn.stopping = true
                reactor.setAllControlRodLevels(100)
                pxn.shutdown()
                break
            -- toggle help
            elseif char == "h" then
                ToggleHelp()
            -- q  target charge up
            elseif char == "q" then
                TargetPercent = TargetPercent + 1
                if TargetPercent > 100 then TargetPercent = 100 end
                pxn.pos(12, 9)
                pxn.print(">"..pxn.padLeft(tostring(TargetPercent), 3).."%<")
            -- a  target charge down
            elseif char == "a" then
                TargetPercent = TargetPercent - 1
                if TargetPercent < 0 then TargetPercent = 0 end
                pxn.pos(12, 9)
                pxn.print(">"..pxn.padLeft(tostring(TargetPercent), 3).."%<")
            -- w  max rods up
            elseif char == "w" then
                RodMax = RodMax + 1
                if RodMax > 100 then RodMax = 100 end
                pxn.pos(12, 10)
                pxn.print(">"..pxn.padLeft(tostring(RodMax), 3).."%<")
            -- s  max rods down
            elseif char == "s" then
                RodMax = RodMax - 1
                if RodMax < 0 then RodMax = 0 end
                pxn.pos(12, 10)
                pxn.print(">"..pxn.padLeft(tostring(RodMax), 3).."%<")
            -- e  update delay up
            elseif char == "e" then
                UpdateDelay = UpdateDelay + 0.5
                if UpdateDelay > 20.0 then UpdateDelay = 20.0 end
                pxn.pos(1, 1)
                pxn.print(" Refresh ["..tostring(UpdateDelay).."] seconds   ")
            -- d  update delay down
            elseif char == "d" then
                UpdateDelay = UpdateDelay - 0.5
                if UpdateDelay < 0.5 then UpdateDelay = 0.5 end
                pxn.pos(1, 1)
                pxn.print(" Refresh ["..tostring(UpdateDelay).."] seconds   ")
            end
        end
    end
end



local function DisplayGraphs(rodsCurrent, energyPercent)
    local sizeX, sizeY = term.getSize()
    -- rods graph
    pxn.DrawBarGraphMon(
        term,
        rodsCurrent,
        100,
        sizeX - 7,
        colors.yellow
    )
    -- energy graph
    pxn.DrawBarGraphMon(
        term,
        energyPercent,
        100,
        sizeX - 3,
        colors.red
    )
end



local function StartupFunc()
    pxn.clear()
    pxn.pos(nil, 2) pxn.center("Inserting rods 100%")
    pxn.pos(nil, 3) pxn.center("Ready for startup..")
    pxn.pos(nil, 5) pxn.center("(press [t] to cancel startup)")
    -- reactor off
    reactor.setAllControlRodLevels(100)
    -- progress bar
    for i=1,StartupDelay do
        if pxn.stopping then
            break
        end
        local str = ""
        for ii=1,StartupDelay do
            str = str..( i >= ii and ">" or "-" )
        end
        pxn.pos(nil, 7)
        pxn.center("["..str.."]")
        os.sleep(1)
    end
    pxn.clear()
    pxn.pos(1, 1)
end



local function Main()

    local MaxEnergyStored = 10000000

    local tempCase = nil
    local tempFuel = nil
    local tempDiff = nil

    local rfTick  = nil
    local fuelSec = nil
    local rfIngot = nil

    local energyCurrent = nil
    local energyLast    = nil
    local energyPercent = nil
    local rodsCurrent   = nil

--  local rollingCharge = 0
--  local rollingRod    = 0
--  local rollingSize   = 0;


    local state = nil
    local turbo = 0

    -- start state
    if RodStart > 100 then RodStart = 100 end
    if RodStart < 0   then RodStart = 0   end
    reactor.setAllControlRodLevels(100 - RodStart)

    while not pxn.stopping do
        pxn.clear()
        local sizeX, sizeY = term.getSize()
        pxn.pos(1, sizeY) term.write(" Press h for help ")
        pxn.pos(2, 2)

        -- case/fuel temp
        tempCase = pxn.floor(
            reactor.getCasingTemperature(),
            1
        )
        tempFuel = pxn.floor(
            reactor.getFuelTemperature(),
            1
        )
        tempDiff = pxn.floor(
            reactor.getFuelTemperature() - reactor.getCasingTemperature(),
            1
        )
        pxn.pos(19)
        pxn.print(
            "   "..
            pxn.padLeft(pxn.padZeros(tempDiff, 1), 4)
            .."c "
        )
        pxn.pos(2)
        pxn.println(
            "Case Temp: "..
            pxn.padLeft(pxn.padZeros(tempCase, 1), 6)
            .."c "
        )
        pxn.println(
            "Fuel Temp: "..
            pxn.padLeft(pxn.padZeros(tempFuel, 1), 6)
            .."c "
        )

        pxn.println()

        -- rf/fuel per tick
        rfTick = pxn.floor(
            reactor.getEnergyProducedLastTick() / 1000.0,
            1
        )
        fuelSec = pxn.floor(
            (reactor.getFuelConsumedLastTick() * 20.0) / 1000.0,
            3
        )
        if fuelSec > 0.0 then
            rfIngot = pxn.floor(
                rfTick / fuelSec,
                1
            )
        else
            rfIngot = 0.0
        end
        pxn.println(
            "  RF/Tick: "..
            pxn.padLeft(pxn.padZeros(tostring(rfTick), 1), 6)
            .."k "
        )
        pxn.println(
            "Ingot/Sec: "..
            pxn.padLeft(pxn.padZeros(fuelSec, 3, true), 6)
            .." "
        )
        pxn.println(
            " RF/Ingot: "..
            pxn.padLeft(pxn.padZeros(rfIngot, 1), 6)
            .."k "
        )

        pxn.println()

        -- energy
        energyCurrent = reactor.getEnergyStored() / 1000.0
        energyPercent = pxn.floor(
            (reactor.getEnergyStored() / MaxEnergyStored) * 100.0,
            1
        )
        pxn.println(
            "   Energy: "..
            pxn.padLeft(math.floor(energyPercent), 3)
            .."%  "..
            math.floor(energyCurrent)
            .."k "
        )



        -- find state
        rodsCurrent = 100 - reactor.getControlRodLevel(1)

        -- first cycle
        if state == nil then
            state = "   "

        -- fully charged
        elseif energyPercent >= 99.0 then
            rodsCurrent = 0
            state = "x-x"

        -- charge empty
        elseif energyPercent <= 1 then
            if rodsCurrent < RodMax then
                rodsCurrent = rodsCurrent + RodStepTurbo
                turbo = turbo + 1
                state = "+E+"
            else
                state = " E "
            end

        -- above target
        elseif energyPercent > TargetPercent then

            -- ||  early turbo break
            if turbo > 0 then
                if rodsCurrent > 0 then
                    rodsCurrent = rodsCurrent - RodStepTurbo
                    state = "^-^"
                else
                    state = "^ ^"
                end
                turbo = turbo - 1

            -- ^  above target and rising
            elseif energyCurrent >= energyLast then

                -- turbo break (if more than 30% above target)
                if energyPercent >= (TargetPercent * 1.3) then
                    if rodsCurrent > 0 then
                        rodsCurrent = rodsCurrent - RodStepTurbo
                        state = "-^-"
                    else
                        state = " ^ "
                    end
                    turbo = turbo - 1

                -- normal break
                else
                    if rodsCurrent > 0 then
                        rodsCurrent = rodsCurrent - RodStep
                        state = "-^ "
                    else
                        state = " ^ "
                    end
                end

            -- v  above target and dropping
            else
                state = " v "
            end

        -- below target
        elseif energyPercent < TargetPercent then

            -- prevent over-shoot (when recovering from dead battery)
            if energyLast == 0 and turbo > 0 then
                rodsCurrent = math.floor(rodsCurrent / 2.0)
                turbo = math.floor(turbo / 2.0)
                state = "---"
            -- below target and rising
            elseif energyCurrent > energyLast then
                if turbo > 0 then
                    state = "^ ^"
                else
                    state = " ^ "
                end

            -- below target and dropping
            else

                -- v  turbo boost (if below 50% of target)
                if energyPercent <= (TargetPercent * 0.5) then
                    if rodsCurrent < RodMax then
                        rodsCurrent = rodsCurrent + RodStepTurbo
                        turbo = turbo + 1
                        state = "+v+"
                    else
                        state = " v "
                    end

                -- normal boost
                else
                    if rodsCurrent < RodMax then
                        rodsCurrent = rodsCurrent + RodStep
                        state = "+v "
                    else
                        state = " v "
                    end

                end

            end

        -- target stable
        else
            turbo = 0
            state = " ~ "

        end



        -- keep rods in range
        if rodsCurrent < 0 then
            rodsCurrent = 0
        end
        if rodsCurrent > RodMax then
            rodsCurrent = RodMax
        end
        -- reset turbo
        if rodsCurrent == 0 then
            turbo = 0
        end
        -- keep turbo in range
        if turbo < 0 then
            turbo = 0
        end
        if turbo > MaxTurboLag then
            turbo = MaxTurboLag
        end



        -- set rods
        reactor.setAllControlRodLevels(100 - rodsCurrent)
        energyLast = energyCurrent



        -- finish display

        -- control rods
        pxn.print(
            "  Control: "..
            pxn.padLeft(tostring(rodsCurrent), 3)
            .."% "
        )
        pxn.pos(18)
        pxn.println(" ["..state.."] ")
        pxn.pos(2)

        if turbo > 0 then
            pxn.println(
                "    Turbo: "..
                pxn.padLeft(tostring(turbo), 3)
                .." "
            )
        end









        DisplayGraphs(rodsCurrent, energyPercent)

        if displayingHelp then
            DisplayHelp()
        end

        os.sleep(UpdateDelay)
    end
end



-- ----------------------------------------
-- run threads



if not pxn.stopping then
    -- startup loop
    parallel.waitForAny(
        KeyPressListener,
        StartupFunc
    )
end

-- active loop
if not pxn.stopping then
    parallel.waitForAny(
        KeyPressListener,
        Main
    )
end

