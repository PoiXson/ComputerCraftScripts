
local ReactorSide = "back"
local MonitorName = "monitor_1"

local targetRods      = 50
local startRods       = 0
local rodStep         = 1
local rodStepTurbo    = 5
local maxTurboLag     = 11
local rollingRange    = 100
local refreshDelay    = 3


local reactor = peripheral.wrap(ReactorSide)
reactor.setAllControlRodLevels(100 - startRods)
local monitor = peripheral.wrap(MonitorName)


-- write startup file
local h = fs.open("/startup", "w")
h.writeLine("shell.run(\"dl run reactor\")")
h.flush()
h.close()


-- delayed startup
if monitor ~= nil then
  monitor.setTextScale(2)
  monitor.clear()
  monitor.setCursorPos(2, 2)
  monitor.write("Inserting rods 100%")
  monitor.setCursorPos(2, 3)
  monitor.write("Starting reactor..")
end
term.clear()
term.setCursorPos(2, 2)
term.write("Inserting rods 100%")
term.setCursorPos(2, 3)
term.write("Starting reactor..")
reactor.setAllControlRodLevels(100)
for i=1,5 do
  if monitor ~= nil then
    monitor.setCursorPos(2, 5)
    monitor.write(i)
  end
  term.setCursorPos(2, 5)
  term.write("[")
  for ii=1,5 do
    if i >= ii then
      term.write(".")
    else
      term.write(" ")
    end
  end
  term.write("]")
  os.sleep(1)
end


local percentLast   = nil
local rollingCharge = 0
local rollingRod    = 0
local rollingSize   = 0;
local turboMode     = 0
while true do
  if monitor ~= nil then
    monitor.clear()
  end
  term.clear()

  -- monitor state
  term.setCursorPos(3, 10)
  if monitor ~= nil then
    term.write("Monitor Connected")
  else
    term.write("No Monitor")
  end

  -- fuel/case temp
  local fuelTemp = math.floor(reactor.getFuelTemperature()   * 10) / 10
  local caseTemp = math.floor(reactor.getCasingTemperature() * 10) / 10
  local tempDiff = math.floor( (reactor.getFuelTemperature() - reactor.getCasingTemperature()) * 10) / 10
  local fuelTempStr = "Fuel Temp: "..tostring(fuelTemp).."   "
  local caseTempStr = "Case Temp: "..tostring(caseTemp).."   "
  local tempDiffStr = tostring(tempDiff).."   "
  if monitor ~= nil then
    monitor.setCursorPos(1, 1)
    monitor.write(fuelTempStr)
    monitor.setCursorPos(1, 2)
    monitor.write(caseTempStr)
    monitor.setCursorPos(20, 2)
    monitor.write(tempDiffStr)
  end
  term.setCursorPos(1, 1)
  term.write(fuelTempStr)
  term.setCursorPos(1, 2)
  term.write(caseTempStr)
  term.setCursorPos(20, 2)

  -- rf/fuel per tick
  local rfTick = math.floor(reactor.getEnergyProducedLastTick() / 10) / 100
  local fuelTick = math.floor(reactor.getFuelConsumedLastTick() * 10) / 10
  local rfTickStr = "RF/Tick:   "..tostring(rfTick).."K   "
  local fuelTickStr = "Fuel/Tick: "..tostring(fuelTick).."   "
  if monitor ~= nil then
    monitor.setCursorPos(1, 3)
    monitor.write(rfTickStr)
    monitor.setCursorPos(1, 4)
    monitor.write(fuelTickStr)
  end
  term.setCursorPos(1, 3)
  term.write(rfTickStr)
  term.setCursorPos(1, 4)
  term.write(fuelTickStr)

  -- energy/rods
  local energy         = reactor.getEnergyStored() / 1000
  local percentFull    = math.floor(reactor.getEnergyStored() / 10000000 * 1000) / 10
  local energyStr      = "Energy:    "..tostring(math.floor(energy)).."k   "
  local currentRod     = 100 - reactor.getControlRodLevel(1)
  if monitor ~= nil then
    monitor.setCursorPos(1, 5)
    monitor.write(energyStr)
    monitor.setCursorPos(1, 6)
  end
  term.setCursorPos(1, 5)
  term.write(energyStr)
  term.setCursorPos(1, 6)

  -- first cycle
  if percentLast == nil then
    if monitor ~= nil then
      monitor.write("           ")
    end
    term.write("           ")
  else

    -- ^  charge is rising
    if percentFull > percentLast then
      if turboMode > 0 then
        currentRod = currentRod - rodStepTurbo
        turboMode = turboMode - 1
        if monitor ~= nil then
          monitor.write("       ^ ^ ")
        end
        term.write("       ^ ^ ")
      else
        if percentFull >= targetRods then
          -- turbo break if more than 33% beyond target
          if percentFull >= (targetRods / 3) + targetRods then
            currentRod = currentRod - rodStepTurbo
            if monitor ~= nil then
              monitor.write("       ^^^ ")
            end
            term.write("       ^^^ ")
          -- normal break
          else
            currentRod = currentRod - rodStep
            if monitor ~= nil then
              monitor.write("         ^ ")
            end
            term.write("         ^ ")
          end
        else
          if monitor ~= nil then
            monitor.write("         ^ ")
          end
          term.write("         ^ ")
        end
      end

    -- v  charge is dropping
    elseif percentFull < percentLast then
      if percentFull < targetRods then
        -- turbo boost if less than half of target
        if percentFull <= (targetRods / 2) then
          currentRod = currentRod + rodStepTurbo
          turboMode = turboMode + 1
          if monitor ~= nil then
            monitor.write("       vvv ")
          end
          term.write("       vvv ")
        -- normal boost
        else
          currentRod = currentRod + rodStep
          if monitor ~= nil then
            monitor.write("         v ")
          end
          term.write("         v ")
        end
      else
        if monitor ~= nil then
          monitor.write("         v ")
        end
        term.write("         v ")
      end

    -- ~  charge is stable
    else
      if percentFull >= 99 then
        currentRod = 0
        if monitor ~= nil then
          monitor.write("      FULL ")
        end
        term.write("      FULL ")
      elseif percentFull <= 1 then
        --currentRod = 5
        currentRod = currentRod + rodStepTurbo
        turboMode = turboMode + 1
        if monitor ~= nil then
          monitor.write("     EMPTY ")
        end
        term.write("     EMPTY ")
      else
        if monitor ~= nil then
          monitor.write("         ~ ")
        end
        term.write("         ~ ")
      end
    end

    -- keep in range
    if currentRod <= 0 then
      currentRod = 0
    end
    if currentRod >= 100 then
      currentRod = 100
    end

    reactor.setAllControlRodLevels(100 - currentRod)
    -- rod rolling average
    if rollingSize == 1 then
      rollingRod = currentRod
    end
    rollingRod = (rollingRod * rollingSize) + currentRod
    rollingRod = rollingRod / (rollingSize + 1)
    -- charge rolling average
    if rollingSize == 1 then
      rollingCharge = percentFull
    end
    rollingCharge = (rollingCharge * rollingSize) + percentFull
    rollingCharge = rollingCharge / (rollingSize + 1)
  end
  percentLast = percentFull

  -- energy/rods percent
  percentFullAvg    = math.floor(rollingCharge * 10) / 10
  percentRodsAvg    = math.floor(rollingRod    * 10) / 10
  if percentFull ~= nil then
    percentFullStr    = tostring(percentFull).."%   "
  else
    percentFullStr    = "0%   "
  end
  percentFullAvgStr = tostring(percentFullAvg).."% avg  "
  percentRodsStr    = "Control:   "..tostring(currentRod).."%   "
  percentRodsAvgStr = tostring(percentRodsAvg).."% avg  "
  if monitor ~= nil then
    monitor.write(percentFullStr)
    monitor.setCursorPos(20, 6)
    monitor.write(percentFullAvgStr)
    monitor.setCursorPos(1, 7)
    monitor.write(percentRodsStr)
    monitor.setCursorPos(20, 7)
    monitor.write(percentRodsAvgStr)
  end
  term.write(percentFullStr)
  term.setCursorPos(20, 6)
  term.write(percentFullAvgStr)
  term.setCursorPos(1, 7)
  term.write(percentRodsStr)
  term.setCursorPos(20, 7)
  term.write(percentRodsAvgStr)
  if monitor ~= nil then
    monitor.setTextColor(colors.black)
    local width, height = monitor.getSize()
    for i = 0, height do
      -- control rods
      monitor.setCursorPos(width - 3, i)
      local p = 100 - (i / height * 100)
      if currentRod > p then
        monitor.setTextColor(colors.black)
        monitor.setBackgroundColor(colors.yellow)
        monitor.write("|")
      elseif currentRod > math.floor(p) then
        monitor.setTextColor(colors.yellow)
        monitor.setBackgroundColor(colors.black)
        monitor.write("=")
      else
        monitor.setTextColor(colors.black)
        monitor.setBackgroundColor(colors.black)
        monitor.write(" ")
      end
      -- stored energy
      monitor.setCursorPos(width - 1, i)
      local p = 100 - (i / height * 100)
      if percentFull > p then
        monitor.setTextColor(colors.black)
        monitor.setBackgroundColor(colors.red)
        monitor.write("|")
      elseif percentFull > math.floor(p) then
        monitor.setTextColor(colors.red)
        monitor.setBackgroundColor(colors.black)
        monitor.write("=")
      else
        monitor.setTextColor(colors.black)
        monitor.setBackgroundColor(colors.black)
        monitor.write(" ")
      end
    end
    monitor.setTextColor(colors.white)
    monitor.setBackgroundColor(colors.black)
  end

  -- turbo mode active
  if turboMode > maxTurboLag then
    turboMode = maxTurboLag
  end
  if turboMode > 0 then
    if monitor ~= nil then
      monitor.setCursorPos(3, 9)
      monitor.write("Turbo: "..tostring(turboMode))
    end
  end
  term.setCursorPos(3, 9)
  term.write("Turbo: "..tostring(turboMode))

  rollingSize = rollingSize + 1
  if rollingSize > rollingRange then
    rollingSize = rollingRange
  end

  sleep(refreshDelay)
end

